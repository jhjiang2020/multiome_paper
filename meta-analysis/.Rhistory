import scanpy as sc
adata = sc.AnnData(X = r.exprs.T, obs = r.meta, var = r.feature_meta)
adata.obsm['umap'] = r.embedding
adata.X
#sc.pl.umap(adata, color='subtype')
#adata.write("/Users/jhjiang/Oxford/Results/multiome/scVI/MP_Plaque.Oct2023.h5ad", compression="gzip")
print(adata.X)
adata.write("/Users/jhjiang/Oxford/Results/multiome/scVI/MP_Plaque.Oct2023.h5ad", compression="gzip")
devtools::install_github("crazyhottommy/scclusteval")
library(scclusteval)
?PairWiseJaccardSets
data_dir <- "~/Oxford/Results/multiome/multiome_share/005_meta_analysis/"
LAM <- readRDS(paste0(data_dir, "/rdata/LAM_plaque.Oct2023.rds"))
subsample_idents<- readRDS(paste0(data_dir, "/scclusteval/gather_subsample.rds")
fullsample_idents<- readRDS(paste0(data_dir, "/scclusteval/gather_full_sample.rds")
subsample_idents<- readRDS(paste0(data_dir, "/scclusteval/gather_subsample.rds"))
fullsample_idents<- readRDS(paste0(data_dir, "/scclusteval/gather_full_sample.rds"))
fullsample_idents
## how many clusters for each different comibination of parameter set?
fullsample_idents %>%
mutate(cluster_num = purrr::map_dbl(original_ident_full, ~length(unique(.x))))
library(dplyr)
## how many clusters for each different comibination of parameter set?
fullsample_idents %>%
mutate(cluster_num = purrr::map_dbl(original_ident_full, ~length(unique(.x))))
subsample_idents_list %>% ungroup() %>% mutate(id = row_number()) %>%
head
subsample_idents_list<- subsample_idents %>%
group_by(pc, resolution, k_param) %>%
nest()
subsample_idents_list<- subsample_idents %>%
group_by(pc, resolution, k_param) %>%
tidyverse::nest()
library(tidyverse)
subsample_idents_list<- subsample_idents %>%
group_by(pc, resolution, k_param) %>%
nest()
subsample_idents_list %>% ungroup() %>% mutate(id = row_number()) %>%
head()
subsample_idents_list %>% ungroup() %>% mutate(id = row_number())
subsample_idents_list$data[[11]]
JaccardRainCloudPlot(subsample_idents_list$data[[11]]$original_ident,
subsample_idents_list$data[[11]]$recluster_ident) +
geom_hline(yintercept = c(0.6, 0.75), linetype = 2) +
xlab("cluster id w/ k=40 res=0.3 pc=15")
stable_clusters<- subsample_idents_list %>%
mutate(stable_cluster = map(data, ~ AssignStableCluster(.x$original_ident,
.x$recluster_ident,
jaccard_cutoff = 0.8,
method = "jaccard_percent",
percent_cutoff = 0.8)))
ParameterSetScatterPlot(stable_clusters = stable_clusters,
fullsample_idents = fullsample_idents,
x_var = "k_param",
y_var = "number",
facet_rows = "resolution",
facet_cols = "pc")
ParameterSetScatterPlot(stable_clusters = stable_clusters,
fullsample_idents = fullsample_idents,
x_var = "k_param",
y_var = "number",
facet_rows = "resolution",
facet_cols = "pc")
ParameterSetScatterPlot(stable_clusters = stable_clusters,
fullsample_idents = fullsample_idents,
x_var = "k_param",
y_var = "percentage",
facet_rows = "resolution",
facet_cols = "pc") +
ggtitle("percentage of cells in stable clusters")
p2 <- ParameterSetScatterPlot(stable_clusters = stable_clusters,
fullsample_idents = fullsample_idents,
x_var = "k_param",
y_var = "number",
facet_rows = "resolution",
facet_cols = "pc")
p3 <- ParameterSetScatterPlot(stable_clusters = stable_clusters,
fullsample_idents = fullsample_idents,
x_var = "k_param",
y_var = "percentage",
facet_rows = "resolution",
facet_cols = "pc") +
ggtitle("percentage of cells in stable clusters")
p3
p2 | p3
p1<- JaccardRainCloudPlot(subsample_idents_list$data[[13]]$original_ident,
p1<- JaccardRainCloudPlot(subsample_idents_list$data[[13]]$original_ident,
subsample_idents_list$data[[13]]$recluster_ident) +
geom_hline(yintercept = c(0.6, 0.75), linetype = 2) +
xlab("cluster id w/ k=40 res=0.35 pc=15")
subsample_idents_list$data[[13]]$recluster_ident) +
geom_hline(yintercept = c(0.6, 0.75), linetype = 2) +
p1<- JaccardRainCloudPlot(subsample_idents_list$data[[13]]$original_ident,
subsample_idents_list$data[[13]]$recluster_ident) +
geom_hline(yintercept = c(0.6, 0.75), linetype = 2) +
xlab("cluster id w/ k=40 res=0.35 pc=15")
p1 | p2 | p3
p1 /(p2|p3)
LAM <- subset(MP_Plaque, subtype=="Lipid-associated MÎ¦")
DefaultAssay(LAM) <- "integrated"
LAM <- RunPCA(LAM, verbose = FALSE)
ElbowPlot(LAM, ndims = 40)
rm(MP_Plaque)
?FindNeighbors
data_dir <- "~/Oxford/Results/multiome/multiome_share/005_meta_analysis/"
LAM <- readRDS(paste0(data_dir, "/rdata/LAM_plaque.Oct2023.rds"))
library(Seurat)
LAM$seurat_clusters
LAM$seurat_clusters %>% table
library(dplyr)
LAM$seurat_clusters %>% table
LAM <- RunUMAP(LAM, assay = "integrated", reduction = "pca", dims = 1:13, reduction.name = 'umap.lam', reduction.key = 'lamUMAP_', return.model = T)
LAM <- FindNeighbors(LAM, reduction = "pca", dims = 1:13)
LAM <- FindClusters(LAM, resolution = 0.45)
# MP_Plaque$RNA_clusters <- MP_Plaque$seurat_clusters
DimPlot(LAM, reduction = "umap.lam", group.by = "seurat_clusters", label = T, repel = T)
LAM <- FindNeighbors(LAM, reduction = "pca", dims = 1:13, k.param = 40)
LAM <- FindClusters(LAM, resolution = 0.45)
# MP_Plaque$RNA_clusters <- MP_Plaque$seurat_clusters
DimPlot(LAM, reduction = "umap.lam", group.by = "seurat_clusters", label = T, repel = T)
VlnPlot(LAM, assay = "RNA", features = c("APOC1", "CHI3L1", "LPL", "FDX1")) + plot_layout(ncol=1)
VlnPlot(LAM, assay = "RNA", features = c("APOC1", "CHI3L1", "LPL", "FDX1")) + plot_layout(ncol=1)
VlnPlot(LAM, assay = "RNA", features = c("APOC1", "CHI3L1", "LPL", "FDX1"))
VlnPlot(LAM, assay = "RNA", features = c("APOC1", "CHI3L1", "LPL", "FDX1", "CD52"))
LAM
rmarkdown::find_pandoc()
LAM_markers = c("S100A4","ALOX5AP", "LYVE1", "FCGBP", # cluster 0
"CXCL12","SLC40A1","FOLR2", "FUCA1", # cluster 2
"CDKN3","MKI67", "TK1", "TOP2A", # cluster 3
"APOC1","FABP5","LPL", "PPARG", # cluster 1
"APOE","MMP9","SPARC","CHI3L1" # cluster 4
)
LAM_markers = c("S100A4","ALOX5AP", "LYVE1", "FCGBP", # cluster 0
"CXCL12","SLC40A1","FOLR2", "FUCA1", # cluster 2
"CDKN3","MKI67", "TK1", "TOP2A", # cluster 3
"APOC1","FABP5","LPL", "PPARG", # cluster 1
"APOE","MMP9","SPARC","CHI3L1" # cluster 4
)
unlink("Library/CloudStorage/OneDrive-Nexus365/Oxford/Code/R/multiome_paper/meta_analysis/meta_human_plaques_cache", recursive = TRUE)
DotPlot(LAM,  assay = "RNA",features = LAM_markers,cluster.idents = T,
#cols = vega_10_palette,
scale.by = "radius")
lam
LAM
library(dplyr)
LAM_markers = c("S100A4","ALOX5AP", "LYVE1", "FCGBP", # cluster 0
"CXCL12","SLC40A1","FOLR2", "FUCA1", # cluster 2
"CDKN3","MKI67", "TK1", "TOP2A", # cluster 3
"APOC1","FABP5","LPL", "PPARG", # cluster 1
"APOE","MMP9","SPARC","CHI3L1" # cluster 4
)
DotPlot(LAM,  assay = "RNA",features = LAM_markers,cluster.idents = T,
#cols = vega_10_palette,
scale.by = "radius") +
# scale_y_discrete(limits=rev,
#                  label = c("0" = expression(paste("Resting", " LAM")),
#                              "1" = expression(paste("LPL"^"+", " LAM-1")),
#                              "2" = expression(paste("CXCL12"^"+", " LAM")),
#                              "3" = expression(paste("Cycling", " LAM")),
#                              "4" = expression(paste("LPL"^"+", " LAM-2"))
#                              )) +
ggtitle("Plaque LAM") +
guides(size = guide_legend(override.aes = list(fill="black"), title = "Percent Expressed", title.position="top"),
color = guide_colorbar(frame.colour = "black", ticks.colour = "black", frame.linewidth = 1, nrow=1,title = "Average Expression", title.position="top")) +
theme_bw(base_size = 15,base_rect_size = 2, base_line_size = 0.2) +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.direction = "vertical",
axis.title = element_blank()
)
library(ggplot2)
LAM_markers = c("S100A4","ALOX5AP", "LYVE1", "FCGBP", # cluster 0
"CXCL12","SLC40A1","FOLR2", "FUCA1", # cluster 2
"CDKN3","MKI67", "TK1", "TOP2A", # cluster 3
"APOC1","FABP5","LPL", "PPARG", # cluster 1
"APOE","MMP9","SPARC","CHI3L1" # cluster 4
)
DotPlot(LAM,  assay = "RNA",features = LAM_markers,cluster.idents = T,
#cols = vega_10_palette,
scale.by = "radius") +
# scale_y_discrete(limits=rev,
#                  label = c("0" = expression(paste("Resting", " LAM")),
#                              "1" = expression(paste("LPL"^"+", " LAM-1")),
#                              "2" = expression(paste("CXCL12"^"+", " LAM")),
#                              "3" = expression(paste("Cycling", " LAM")),
#                              "4" = expression(paste("LPL"^"+", " LAM-2"))
#                              )) +
ggtitle("Plaque LAM") +
guides(size = guide_legend(override.aes = list(fill="black"), title = "Percent Expressed", title.position="top"),
color = guide_colorbar(frame.colour = "black", ticks.colour = "black", frame.linewidth = 1, nrow=1,title = "Average Expression", title.position="top")) +
theme_bw(base_size = 15,base_rect_size = 2, base_line_size = 0.2) +
theme(
axis.text.x = element_text(angle = 45, vjust = 1, hjust=1),
legend.direction = "vertical",
axis.title = element_blank()
)
DefaultAssay(LAM) <- "RNA"
exprs <- GetAssayData(LAM, slot = "counts")
meta <- LAM[[]]
feature_meta <- GetAssay(LAM)[[]]
LAM
embedding <- Embeddings(LAM, "umap.lam")
library(reticulate)
use_condaenv("scvi")
reticulate::repl_python()
use_condaenv("spatial")
reticulate::repl_python()
